package com.example.pointscanner;

import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.content.SharedPreferences;
import android.content.pm.ActivityInfo;
import android.content.pm.PackageManager;
import android.net.wifi.ScanResult;
import android.net.wifi.WifiManager;
import android.os.AsyncTask;
import android.os.Build;
import android.os.Bundle;
import android.os.Environment;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ListView;
import android.widget.Toast;

import androidx.annotation.RequiresApi;
import androidx.appcompat.app.AppCompatActivity;
import androidx.appcompat.widget.Toolbar;
import androidx.core.app.ActivityCompat;

import org.apache.commons.net.ftp.FTPClient;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.IndexedColors;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.net.NetworkInterface;
import java.text.SimpleDateFormat;
import java.util.Collections;
import java.util.Date;
import java.util.List;
import java.util.Timer;
import java.util.TimerTask;
import java.util.concurrent.TimeUnit;

//import com.example.pointscanner.R;

public class MainActivity extends AppCompatActivity implements View.OnClickListener {

    Context context;
    WifiManager wifiManager;
   // TextView errors;
    Button Scan, Write, Start, Stop;
    boolean reached;
    String h = System.getProperty("line.separator");
    ListView lv;
    // private final int REQUEST_CODE_PERMISSION_FINE_LOC = 1;
    //  private final int REQUEST_CODE_PERMISSION_WRITE = 2;
    List<ScanResult> results, resSend;
    String sense[], prom[];
    String tosend[], mean[];
    String mac;
    String mydate;
    String fileName;
    String recordTime;
    String serverFile;
    String host;
    Integer port;
    File file;
    FTP client;
    //ifIP isreached;
    EditText editX, editY, editIP, editPort;
    Timer timer;
    TimerTask task;
    BufferedOutputStream os;
    BufferedInputStream is;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        Toolbar toolbar = findViewById(R.id.toolbar);
        setSupportActionBar(toolbar);
        setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);
        context = getApplicationContext();
        wifiManager = (WifiManager) context.getSystemService(Context.WIFI_SERVICE);
        Scan = findViewById(R.id.Scan);
        Write = findViewById(R.id.Write);
        Start = findViewById(R.id.Start);
        Stop = findViewById(R.id.Stop);
        lv = findViewById(R.id.list);
        editX = findViewById(R.id.editX);
        editY = findViewById(R.id.editY);
        editPort = findViewById(R.id.editPort);
        editIP = findViewById(R.id.editIP);
        SimpleDateFormatMy ();
        fileName = "Records of " + Build.MODEL + " " + mydate + ".xlsx";
        Scan.setOnClickListener((View.OnClickListener) this);
        Write.setOnClickListener((View.OnClickListener) this);
        Start.setOnClickListener((View.OnClickListener) this);
        Stop.setOnClickListener((View.OnClickListener) this);
        reached = false;
        onRequestPermissionsResult();
    }

    public void SimpleDateFormatMy () {
        SimpleDateFormat dateFormat = new SimpleDateFormat("dd.MM.yy");
        mydate = dateFormat.format(new Date());
    }

    public static boolean hasPermissions(Context context, String... permissions) {
        if (context != null && permissions != null) {
            for (String permission : permissions) {
                if (ActivityCompat.checkSelfPermission(context, permission) != PackageManager.PERMISSION_GRANTED) {
                    return false;
                }
            }
        }
        return true;
    }

    public void onRequestPermissionsResult() {
        int PERMISSION_ALL = 1;
        String[] PERMISSIONS = {
                android.Manifest.permission.WRITE_EXTERNAL_STORAGE,
                android.Manifest.permission.ACCESS_FINE_LOCATION,
        };

        if (!hasPermissions(this, PERMISSIONS)) {
            while (!hasPermissions(this, PERMISSIONS))
           //     onRequestPermissionsResult();
                ActivityCompat.requestPermissions(this, PERMISSIONS, PERMISSION_ALL);
        }
    }


    @RequiresApi(api = Build.VERSION_CODES.M)
    private void scanSuccess() {
        results = wifiManager.getScanResults();
        int r = results.size();
        int i = 0, v = 0;
        prom = new String[r];
        int freq;
        while (i < r) {
            if (results.get(i).level >= -75) {
                freq = results.get(i).frequency;
                mac = results.get(i).BSSID;
                prom[v] = ("SSID: " + results.get(i).SSID + "\r\nMAC: " + mac + "\r\nRSSI: " + results.get(i).level +
                        "\r\nFreq: " + freq + " AP №: " + getAPN(mac) + " Room: " + getRoom(mac));
                i++;
                v++;
            } else i++;
        }
        sense = new String[v];
        i = 0;
        while (i < v) {
            sense[i] = (prom[i]);
            i++;
        }
        lv.setAdapter(new ArrayAdapter<>(this, R.layout.row, sense));
    }

    @RequiresApi(api = Build.VERSION_CODES.M)
    private void scanSend() {
        BroadcastReceiver wifiScanReceiver = new BroadcastReceiver() {
            @RequiresApi(api = Build.VERSION_CODES.M)
            @Override
            public void onReceive(Context c, Intent intent) {
                boolean success = intent.getBooleanExtra(WifiManager.EXTRA_RESULTS_UPDATED, false);
                if (success) {
                    sendSuccess();
                }
            }
        };
        IntentFilter intentFilter = new IntentFilter();
        intentFilter.addAction(WifiManager.SCAN_RESULTS_AVAILABLE_ACTION);
        context.registerReceiver(wifiScanReceiver, intentFilter);

        boolean success = wifiManager.startScan();
        if (success) {
            sendSuccess();
        }
    }

    @RequiresApi(api = Build.VERSION_CODES.M)
    private void sendSuccess() {
        resSend = wifiManager.getScanResults();
        int r = resSend.size();
        int i = 0, v = 0;
        tosend = new String[r];
        while (i < r) {
            if (resSend.get(i).level >= -75) {
                mac = resSend.get(i).BSSID;
                tosend[v] = ("UE: " + getMacAddr() + " AP: " + mac + " RSSI: " + resSend.get(i).level + "\r\n");
                i++;
                v++;
            } else i++;
        }
        mean = new String[v];
        i = 0;
        while (i < v) {
            mean[i] = (tosend[i]);
            i++;
        }
    }

    private void scanFailure() {
        if (results != null) {
            if (results.isEmpty()) Toast.makeText(context,"Нет результатов", Toast.LENGTH_SHORT).show();
            else Toast.makeText(context,"Нет новых результатов, подождите", Toast.LENGTH_SHORT).show();}
        else  Toast.makeText(context,"Нет результатов", Toast.LENGTH_SHORT).show();
    }


    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        // Inflate the menu; this adds items to the action bar if it is present.
        getMenuInflater().inflate(R.menu.menu_main, menu);
        return true;
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        // Handle action bar item clicks here. The action bar will
        // automatically handle clicks on the Home/Up button, so long
        // as you specify a parent activity in AndroidManifest.xml.
        int id = item.getItemId();

        //noinspection SimplifiableIfStatement
        if (id == R.id.action_settings) {
            return true;
        }

        return super.onOptionsItemSelected(item);
    }
//
//    public class ifIP extends AsyncTask<Void, Void, Void> {
//        protected Void doInBackground(Void... args) {
//            InetAddress ip = null;
//            try {
//                ip = InetAddress.getByName(host);
//                if (ip.isReachable(3000))
//                    reached = true;
//                else {
//                    reached = false;
//                    }
//            }
//            catch (Exception e) {
//                e.printStackTrace();
//            }
//      return null;
//    }
//}
    public class FTP extends AsyncTask<Void, Void, Void> {
        FTPClient ftpClient = new FTPClient();
        String recordTime;
        String serverFile;
        SimpleDateFormat timeFormat = new SimpleDateFormat("dd.MM.yy HH-mm-ss");
        @RequiresApi(api = Build.VERSION_CODES.M)
        protected Void doInBackground(Void... args) {
            try {
               ftpClient.connect(host, port);
               ftpClient.login("root", "123");
            } catch (Exception e) {
                e.printStackTrace();
            }
            while (true) {
                try {
                    recordTime = timeFormat.format(new Date());
                    serverFile = "Data from " + Build.MODEL + " " + recordTime + ".txt";
                   scanSend();
                  byte[] byteArray = new byte[8192];
                    ByteArrayOutputStream buffer = new ByteArrayOutputStream();
                  for (int c = 0; c < mean.length; c++){
                     buffer.write(mean[c].getBytes());
                 }
                     byteArray = buffer.toByteArray();
                    ftpClient.storeFile(serverFile, new ByteArrayInputStream(byteArray));
                } catch (Exception e) {
                    e.printStackTrace();
                }
                try {
                    TimeUnit.SECONDS.sleep(2);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
                if (isCancelled()) {
                    try {
                        ftpClient.disconnect();
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                    break;}
            }
            return null;
        }
    }

        @RequiresApi(api = Build.VERSION_CODES.M)
    public void onClick(View v) {

        switch ((v.getId())) {
            case R.id.Scan: {
                BroadcastReceiver wifiScanReceiver = new BroadcastReceiver() {
                    @RequiresApi(api = Build.VERSION_CODES.M)
                    @Override
                    public void onReceive(Context c, Intent intent) {
                        boolean success = intent.getBooleanExtra(WifiManager.EXTRA_RESULTS_UPDATED, false);
                        if (success) {
                            scanSuccess();
                        } else {
                            scanFailure();
                        }
                    }
                };
                IntentFilter intentFilter = new IntentFilter();
                intentFilter.addAction(WifiManager.SCAN_RESULTS_AVAILABLE_ACTION);
                context.registerReceiver(wifiScanReceiver, intentFilter);

                boolean success = wifiManager.startScan();
                if (success) {
                    scanSuccess();
                } else scanFailure();
                break;
            }
            case R.id.Write: {
                File file = new File(context.getExternalFilesDir("/"), fileName);
                if (!file.exists() || file == null) {
                    createExcelFile(this, fileName);
                    break;
                } else {
                    try {
                        saveExcelFile(this, fileName);
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    break;
                }
            }
            case R.id.Start: {
                host = editIP.getText().toString();
                port = Integer.parseInt(editPort.getText().toString());
             //   isreached = new ifIP();
          //      isreached.execute();
            //    isreached.cancel(true);
             //   if (reached = true) {
                    client = new FTP();
                    client.execute();
                    scanSend();
                    break;
             //  }
            }
            case R.id.Stop: {
                try {
                    client.cancel(true);
                }
                catch (Exception e) {
                    e.printStackTrace();
                }
                break;
            }
        }
    }


    @RequiresApi(api = Build.VERSION_CODES.M)
    private boolean createExcelFile(Context context, String fileName) {

        if (!isExternalStorageWritable()) {
            Toast.makeText(context, "Хранилище недоступно для записи", Toast.LENGTH_SHORT).show();
            return false;
        }

        boolean writing = false;

        Workbook wb;
        if (isUnsupportedDevice()) {
            fileName = fileName.substring (0, fileName.length() - 1);
            wb = new HSSFWorkbook();
        } else {
            wb = new XSSFWorkbook();
        }

        Cell c = null;

        CellStyle cs = wb.createCellStyle();
        cs.setFillForegroundColor(IndexedColors.TAN.getIndex());
        cs.setFillPattern(CellStyle.SOLID_FOREGROUND);

        Sheet sheet1 = null;
        sheet1 = wb.createSheet("Протокол измерений" + Build.MANUFACTURER + " " + Build.PRODUCT);

        String Mac = null;
        Mac = getMacAddr();

        Row rows[] = new Row[10000];
        rows[0] = sheet1.createRow(0);
        c = rows[0].createCell(0);
        c.setCellValue(Build.MANUFACTURER + " " + Build.PRODUCT + " MAC: " + Mac);

        rows[1] = sheet1.createRow(1);
        c = rows[1].createCell(0);
        c.setCellValue("X");
        c.setCellStyle(cs);

        c = rows[1].createCell(1);
        c.setCellValue("Y");
        c.setCellStyle(cs);

        c = rows[1].createCell(2);
        c.setCellValue("SSID");
        c.setCellStyle(cs);

        c = rows[1].createCell(3);
        c.setCellValue("MAC");
        c.setCellStyle(cs);

        c = rows[1].createCell(4);
        c.setCellValue("RSSI");
        c.setCellStyle(cs);

        c = rows[1].createCell(5);
        c.setCellValue("Frequency");
        c.setCellStyle(cs);

        c = rows[1].createCell(6);
        c.setCellValue("ChWidth");
        c.setCellStyle(cs);

        c = rows[1].createCell(7);
        c.setCellValue("Ch№");
        c.setCellStyle(cs);

        c = rows[1].createCell(8);
        c.setCellValue("Room");
        c.setCellStyle(cs);

        c = rows[1].createCell(9);
        c.setCellValue("Point№");
        c.setCellStyle(cs);

        sheet1.setColumnWidth(0, (15 * 100));
        sheet1.setColumnWidth(1, (15 * 100));
        sheet1.setColumnWidth(2, (15 * 500));
        sheet1.setColumnWidth(3, (15 * 300));
        sheet1.setColumnWidth(4, (15 * 110));
        sheet1.setColumnWidth(5, (15 * 200));
        sheet1.setColumnWidth(6, (15 * 150));
        sheet1.setColumnWidth(7, (15 * 150));
        sheet1.setColumnWidth(8, (15 * 250));
        sheet1.setColumnWidth(9, (15 * 150));

        int i = 0;
        int v = 2;
        int qq = 0;
        if (!results.isEmpty()) qq = results.size();
        if (qq != 0) {
            while (i < qq) {
                if (results.get(i).level >= -75) {
                    int cn, freq, cW;
                    String Width = null;
                    freq = results.get(i).frequency; cW = results.get(i).channelWidth; mac = results.get(i).BSSID;
                    if (freq >= 2401 && freq <= 2483)
                    {cn = (freq - 2412)/5 + 1; }
                    else {cn = (freq - 5000)/5;}
                    switch (cW) {
                        case 0: {Width = "20 MHz"; break;}
                        case 1: {Width = "40 MHz"; break;}
                        case 2: {Width = "80 MHz"; break;}
                        case 4: {Width = "160 MHz"; break;}
                    }

                    rows[v] = sheet1.createRow(v);
                    c = rows[v].createCell(0);
                    c.setCellValue(editX.getText().toString());
                    c = rows[v].createCell(1);
                    c.setCellValue(editY.getText().toString());
                    c = rows[v].createCell(2);
                    c.setCellValue(results.get(i).SSID);
                    c = rows[v].createCell(3);
                    c.setCellValue(results.get(i).BSSID);
                    c = rows[v].createCell(4);
                    c.setCellValue(results.get(i).level);
                    c = rows[v].createCell(5);
                    c.setCellValue(results.get(i).frequency);
                    c = rows[v].createCell(6);
                    c.setCellValue(Width);
                    c = rows[v].createCell(7);
                    c.setCellValue(cn);
                    c = rows[v].createCell(8);
                    c.setCellValue(getRoom(mac));
                    c = rows[v].createCell(9);
                    c.setCellValue(getAPN(mac));
                    i++;
                    v++;
                } else i++;
            }

            //    file = context.getFileStreamPath(fileName);
            //   if (!file.exists()) {
            file = new File(context.getExternalFilesDir("/"), fileName);
            FileOutputStream os = null;

            try {
                os = new FileOutputStream(file);
                wb.write(os);
                // wb.close();
                Toast.makeText(getApplicationContext(), "Записываю файл" + file, Toast.LENGTH_SHORT).show();
                writing = true;
            } catch (IOException e) {
                Toast.makeText(getApplicationContext(), "Ошибка записи файла" + file, Toast.LENGTH_SHORT).show();
            } catch (Exception e) {
                Toast.makeText(getApplicationContext(), "Не получилось сохранить файл" + file, Toast.LENGTH_SHORT).show();
            } finally {
                try {
                    if (null != os)
                        os.close();
                } catch (Exception ex) {
                }
            }
           // Toast.makeText(getApplicationContext(), "Файл сохранен", Toast.LENGTH_SHORT).show();
            return writing;
        } else {
            //Toast.makeText(getApplicationContext(), "Нет данных", Toast.LENGTH_SHORT).show();
            return writing;
        }
    }

    @RequiresApi(api = Build.VERSION_CODES.M)
    private boolean saveExcelFile(Context context, String fileName) throws Exception {

        if (!isExternalStorageWritable()) {
            Toast.makeText(getApplicationContext(), "Хранилище недоступно для записи", Toast.LENGTH_SHORT).show();
            return false;
        }

        boolean writing = false;

        file = new File(context.getExternalFilesDir("/"), fileName);
        FileInputStream is = new FileInputStream(file);

        Workbook wb;
        if (isUnsupportedDevice()) {
            fileName = fileName.substring (0, fileName.length() - 1);
            wb = new HSSFWorkbook(is);
        } else {
            wb = new XSSFWorkbook(is);
        }

        Sheet sheet1 = wb.getSheetAt(0);

        int v = sheet1.getLastRowNum() + 1;
        v++;
        Row rows[] = new Row[10000];

        Cell c = null;

        int i = 0;
        int qq = 0;
        if (!results.isEmpty()) qq = results.size();
        if (qq != 0) {
            while (i < qq) {
                if (results.get(i).level >= -75) {
                    int cn, freq, cW;
                    String Width = null;
                    freq = results.get(i).frequency; cW = results.get(i).channelWidth;  mac = results.get(i).BSSID;
                    if (freq >= 2401 && freq <= 2483)
                    {cn = (freq - 2412)/5 + 1; }
                    else {cn = (freq - 5000)/5;}
                    switch (cW) {
                        case 0: {Width = "20 MHz"; break;}
                        case 1: {Width = "40 MHz"; break;}
                        case 2: {Width = "80 MHz"; break;}
                        case 4: {Width = "160 MHz"; break;}
                    }

                    rows[v] = sheet1.createRow(v);
                    c = rows[v].createCell(0);
                    c.setCellValue(editX.getText().toString());
                    c = rows[v].createCell(1);
                    c.setCellValue(editY.getText().toString());
                    c = rows[v].createCell(2);
                    c.setCellValue(results.get(i).SSID);
                    c = rows[v].createCell(3);
                    c.setCellValue(results.get(i).BSSID);
                    c = rows[v].createCell(4);
                    c.setCellValue(results.get(i).level);
                    c = rows[v].createCell(5);
                    c.setCellValue(results.get(i).frequency);
                    c = rows[v].createCell(6);
                    c.setCellValue(Width);
                    c = rows[v].createCell(7);
                    c.setCellValue(cn);
                    c = rows[v].createCell(8);
                    c.setCellValue(getRoom(mac));
                    c = rows[v].createCell(9);
                    c.setCellValue(getAPN(mac));
                    i++;
                    v++;
                } else i++;
            }

            FileOutputStream os = null;

            try {
                os = new FileOutputStream(file);
                wb.write(os);
                // wb.close();
                Toast.makeText(getApplicationContext(), "Записываю файл" + file, Toast.LENGTH_SHORT).show();
                writing = true;
            } catch (IOException e) {
                Toast.makeText(getApplicationContext(), "Ошибка записи файла" + file, Toast.LENGTH_SHORT).show();
            } catch (Exception e) {
                Toast.makeText(getApplicationContext(), "Не получилось сохранить файл" + file, Toast.LENGTH_SHORT).show();
            } finally {
                try {
                    if (null != os)
                        os.close();  is.close();
                } catch (Exception ex) {
                }
            }

            Toast.makeText(getApplicationContext(), "Файл сохранен", Toast.LENGTH_SHORT).show();
            return writing;
        } else {
            //Toast.makeText(getApplicationContext(), "Нет данных", Toast.LENGTH_SHORT).show();
            return writing;
        }
    }

    public boolean isExternalStorageWritable () {
        String state = Environment.getExternalStorageState();
        if (Environment.MEDIA_MOUNTED.equals(state)) {
            return true;
        }
        return false;
    }

    public boolean isUnsupportedDevice() {
        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.LOLLIPOP)
        {return true;}
        return false;}

    public static String getMacAddr() {
        try {
            List<NetworkInterface> all = Collections.list(NetworkInterface.getNetworkInterfaces());
            for (NetworkInterface nif : all) {
                if (!nif.getName().equalsIgnoreCase("wlan0")) continue;

                byte[] macBytes = nif.getHardwareAddress();
                if (macBytes == null) {
                    return "";
                }

                StringBuilder res1 = new StringBuilder();
                for (byte b : macBytes) {
                    res1.append(String.format("%02X:",b));
                }

                if (res1.length() > 0) {
                    res1.deleteCharAt(res1.length() - 1);
                }
                return res1.toString();
            }
        } catch (Exception ex) {
        }
        return "02:00:00:00:00:00";
    }

    public String getRoom(String strings) {
        switch (mac) {
            case "d4:60:e3:aa:e6:64": return "гостиная";
            case "88:c3:97:60:a2:31": return "моя";
            case "e8:28:c1:da:d0:61": case "e8:28:c1:da:d0:62": case "e8:28:c1:da:d0:66": case "e8:28:c1:da:d0:67":
                return "столовая";
            case "e8:28:c1:da:ce:e1": case "e8:28:c1:da:ce:e2": case "e8:28:c1:da:ce:e6": case "e8:28:c1:da:ce:e7":
                return "столовая";
            case "e8:28:c1:da:cf:e1": case "e8:28:c1:da:cf:e2": case "e8:28:c1:da:cf:e6": case "e8:28:c1:da:cf:e7":
                return "столовая";
            case "e8:28:c1:da:d0:01": case "e8:28:c1:da:d0:02": case "e8:28:c1:da:d0:06": case "e8:28:c1:da:d0:07":
                return "столовая";
            case "e8:28:c1:da:cf:31": case "e8:28:c1:da:cf:32": case "e8:28:c1:da:cf:33": case "e8:28:c1:da:cf:36":
            case "e8:28:c1:da:cf:37": case "e8:28:c1:da:cf:38": case "e8:28:c1:da:cf:39":
                return "202";
            case "e0:d9:e3:8d:80:d0": case "e0:d9:e3:8d:80:d1": case "e0:d9:e3:8d:80:d2": case "e0:d9:e3:8d:80:c0":
            case "e0:d9:e3:8d:80:c1": case "e0:d9:e3:8d:80:c2":
                return "205";
            case "e0:d9:e3:73:c7:20": case "e0:d9:e3:73:c7:21": case "e0:d9:e3:73:c7:22": case "e0:d9:e3:73:c7:30":
            case "e0:d9:e3:73:c7:32": case "e0:d9:e3:73:c7:35": case "e0:d9:e3:73:c7:38":
                return "206";
            case "e0:d9:e3:73:d3:40": case "e0:d9:e3:73:d3:41": case "e0:d9:e3:73:d3:42": case "e0:d9:e3:73:d3:50":
            case "e0:d9:e3:73:d3:51": case "e0:d9:e3:73:d3:52":
                return "208";
            case "e0:d9:e3:71:f5:50": case "e0:d9:e3:71:f5:51": case "e0:d9:e3:71:f5:52": case "e0:d9:e3:71:f5:40":
            case "e0:d9:e3:71:f5:41": case "e0:d9:e3:71:f5:42":
                    return "лестница";
            case "e0:d9:e3:73:57:b0": case "e0:d9:e3:73:57:b1": case "e0:d9:e3:73:57:b2": case "e0:d9:e3:73:57:b3":
            case "e0:d9:e3:73:57:a0": case "e0:d9:e3:73:57:a1": case "e0:d9:e3:73:57:a2": case "e0:d9:e3:73:57:a3":
                return "коридор";
            case "e0:d9:e3:92:bb:e0": case "e0:d9:e3:92:bb:e1": case "e0:d9:e3:92:bb:e2": case "e0:d9:e3:92:bb:e3":
            case "e0:d9:e3:92:bb:f0": case "e0:d9:e3:92:bb:f1": case "e0:d9:e3:92:bb:f2": case "e0:d9:e3:92:bb:f3":
                return "коридор";
            case "e8:28:c1:da:d0:16": case "e8:28:c1:da:d0:19":
                return "402";
            case "e0:d9:e3:8f:8f:30": case "e0:d9:e3:8f:8f:31": case "e0:d9:e3:8f:8f:32": case "e0:d9:e3:8f:8f:20":
            case "e0:d9:e3:8f:8f:21": case "e0:d9:e3:8f:8f:22": case "e0:d9:e3:8f:8f:23":
                return "405";
            case "e0:d9:e3:4e:61:50": case "e0:d9:e3:4e:61:51": case "e0:d9:e3:4e:61:52": case "e0:d9:e3:4e:61:40":
            case "e0:d9:e3:4e:61:41": case "e0:d9:e3:4e:61:42": case "e0:d9:e3:4e:61:43":
                return "406";
            case "e0:d9:e3:8a:00:f0": case "e0:d9:e3:8a:00:f1": case "e0:d9:e3:8a:00:f2":
            case "e0:d9:e3:8a:00:e0": case "e0:d9:e3:8a:00:e1": case "e0:d9:e3:8a:00:e2":
                return "408";
            case "e0:d9:e3:72:58:70": case "e0:d9:e3:72:58:71": case "e0:d9:e3:72:58:72": case "e0:d9:e3:72:58:73": case "e0:d9:e3:72:58:78":
            case "e0:d9:e3:72:58:60": case "e0:d9:e3:72:58:61": case "e0:d9:e3:72:58:62": case "e0:d9:e3:72:58:63": case "e0:d9:e3:72:58:68":
                return "лестница";
            case "a8:f9:4b:b4:ff:10": case "a8:f9:4b:b4:ff:11":
            case "a8:f9:4b:b4:ff:12": case "a8:f9:4b:b4:ff:13":
                return "коридор prod";
            case "e0:d9:e3:8d:7f:e0": case "e0:d9:e3:8d:7f:f0":
                return "коридор prod";
            case "e8:28:c1:da:cf:53": case "e8:28:c1:da:cf:56": case "e8:28:c1:da:cf:57": case "e8:28:c1:da:cf:58":
                return "201а";
        } return "?";
    }

    public String getAPN(String strings) {
        switch (mac) {
            case "d4:60:e3:aa:e6:64": return "1";
            case "88:c3:97:60:a2:31": return "2";
            case "e8:28:c1:da:d0:61": case "e8:28:c1:da:d0:62": case "e8:28:c1:da:d0:66": case "e8:28:c1:da:d0:67":
                return "1-1";
            case "e8:28:c1:da:d0:01": case "e8:28:c1:da:d0:02": case "e8:28:c1:da:d0:06": case "e8:28:c1:da:d0:07":
                return "1-2";
            case "e8:28:c1:da:ce:e1": case "e8:28:c1:da:ce:e2": case "e8:28:c1:da:ce:e6": case "e8:28:c1:da:ce:e7":
                return "1-3";
            case "e8:28:c1:da:cf:e1": case "e8:28:c1:da:cf:e2": case "e8:28:c1:da:cf:e6": case "e8:28:c1:da:cf:e7":
                return "1-4";
            case "e0:d9:e3:73:d3:40": case "e0:d9:e3:73:d3:41": case "e0:d9:e3:73:d3:42": case "e0:d9:e3:73:d3:50":
            case "e0:d9:e3:73:d3:51": case "e0:d9:e3:73:d3:52":
                return "2-1";
            case "e0:d9:e3:73:c7:20": case "e0:d9:e3:73:c7:21": case "e0:d9:e3:73:c7:22": case "e0:d9:e3:73:c7:30":
            case "e0:d9:e3:73:c7:32": case "e0:d9:e3:73:c7:35": case "e0:d9:e3:73:c7:38":
                return "2-2";
            case "e0:d9:e3:71:f5:50": case "e0:d9:e3:71:f5:51": case "e0:d9:e3:71:f5:52": case "e0:d9:e3:71:f5:40":
            case "e0:d9:e3:71:f5:41": case "e0:d9:e3:71:f5:42":
                return "2-3";
            case "e8:28:c1:da:cf:31": case "e8:28:c1:da:cf:32": case "e8:28:c1:da:cf:33": case "e8:28:c1:da:cf:36":
            case "e8:28:c1:da:cf:37": case "e8:28:c1:da:cf:38": case "e8:28:c1:da:cf:39":
                return "2-4";
            case "e0:d9:e3:8d:80:d0": case "e0:d9:e3:8d:80:d1": case "e0:d9:e3:8d:80:d2": case "e0:d9:e3:8d:80:c0":
            case "e0:d9:e3:8d:80:c1": case "e0:d9:e3:8d:80:c2":
                return "2-5";
            case "e0:d9:e3:73:57:b0": case "e0:d9:e3:73:57:b1": case "e0:d9:e3:73:57:b2": case "e0:d9:e3:73:57:b3":
            case "e0:d9:e3:73:57:a0": case "e0:d9:e3:73:57:a1": case "e0:d9:e3:73:57:a2": case "e0:d9:e3:73:57:a3":
                return "3-1";
            case "e0:d9:e3:92:bb:e0": case "e0:d9:e3:92:bb:e1": case "e0:d9:e3:92:bb:e2": case "e0:d9:e3:92:bb:e3":
            case "e0:d9:e3:92:bb:f0": case "e0:d9:e3:92:bb:f1": case "e0:d9:e3:92:bb:f2": case "e0:d9:e3:92:bb:f3":
                return "3-2";
            case "e8:28:c1:da:d0:16": case "e8:28:c1:da:d0:19":
                return "4-1";
            case "e0:d9:e3:8f:8f:30": case "e0:d9:e3:8f:8f:31": case "e0:d9:e3:8f:8f:32": case "e0:d9:e3:8f:8f:20":
            case "e0:d9:e3:8f:8f:21": case "e0:d9:e3:8f:8f:22": case "e0:d9:e3:8f:8f:23":
                return "4-2";
            case "e0:d9:e3:4e:61:50": case "e0:d9:e3:4e:61:51": case "e0:d9:e3:4e:61:52": case "e0:d9:e3:4e:61:40":
            case "e0:d9:e3:4e:61:41": case "e0:d9:e3:4e:61:42": case "e0:d9:e3:4e:61:43":
                return "4-3";
            case "e0:d9:e3:8a:00:f0": case "e0:d9:e3:8a:00:f1": case "e0:d9:e3:8a:00:f2":
            case "e0:d9:e3:8a:00:e0": case "e0:d9:e3:8a:00:e1": case "e0:d9:e3:8a:00:e2":
                return "4-4";
            case "e0:d9:e3:72:58:70": case "e0:d9:e3:72:58:71": case "e0:d9:e3:72:58:72": case "e0:d9:e3:72:58:73": case "e0:d9:e3:72:58:78":
            case "e0:d9:e3:72:58:60": case "e0:d9:e3:72:58:61": case "e0:d9:e3:72:58:62": case "e0:d9:e3:72:58:63": case "e0:d9:e3:72:58:68":
                return "4-5";
            case "a8:f9:4b:b4:ff:10": case "a8:f9:4b:b4:ff:11":
            case "a8:f9:4b:b4:ff:12": case "a8:f9:4b:b4:ff:13":
                return "3-6";
            case "e0:d9:e3:8d:7f:e0": case "e0:d9:e3:8d:7f:f0":
                return "3-7";
            case "e8:28:c1:da:cf:53": case "e8:28:c1:da:cf:56": case "e8:28:c1:da:cf:57": case "e8:28:c1:da:cf:58":
                return "2-6";
        } return "?";
    }

    @Override
    protected void onResume() {
        super.onResume();
        SharedPreferences settings = getPreferences(0);
        String host = settings.getString("Host" , "");
        editIP.setText(host);
        String sport = settings.getString("Port" , "");
        editPort.setText(sport);
    }

    @Override
    protected void onPause() {
        super.onPause();
        host = editIP.getText().toString();
        String sport = editPort.getText().toString();
        SharedPreferences settings = getPreferences(0);
        SharedPreferences.Editor editor = settings.edit();
        editor.putString("Host", host);
        editor.putString("Port", sport);
        editor.apply();
    }
}

